name: Test Execution

on:
  workflow_dispatch:
    inputs:
      test_file:
        description: 'Test file to run (leave empty to run all tests)'
        required: false
        default: ''
      test_id:
        description: 'Test ID for tracking'
        required: false
        default: ''
      callback_url:
        description: 'Webhook URL to send results'
        required: false
        default: ''
  push:
    branches: [ main ]
    paths:
      - 'tests/**/*.spec.ts'
  pull_request:
    branches: [ main ]
    paths:
      - 'tests/**/*.spec.ts'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium firefox webkit
      
    - name: Run tests
      id: test-run
      run: |
        if [ -n "${{ github.event.inputs.test_file }}" ]; then
          npx playwright test "${{ github.event.inputs.test_file }}" --reporter=json | tee test-results.json
        else
          npx playwright test --reporter=json | tee test-results.json
        fi
      env:
        TEST_ID: ${{ github.event.inputs.test_id }}
        CI: true
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
        
    - name: Upload test videos
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-videos
        path: test-results/
        retention-days: 30
        
    - name: Parse test results
      if: always()
      id: parse-results
      run: |
        if [ -f test-results.json ]; then
          TOTAL=$(jq '.stats.expected' test-results.json)
          PASSED=$(jq '.stats.expected - .stats.unexpected - .stats.flaky' test-results.json)
          FAILED=$(jq '.stats.unexpected' test-results.json)
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "status=$([ $FAILED -eq 0 ] && echo 'passed' || echo 'failed')" >> $GITHUB_OUTPUT
        else
          echo "total=0" >> $GITHUB_OUTPUT
          echo "passed=0" >> $GITHUB_OUTPUT
          echo "failed=0" >> $GITHUB_OUTPUT
          echo "status=failed" >> $GITHUB_OUTPUT
        fi
        
    - name: Send webhook notification
      if: always() && github.event.inputs.callback_url != ''
      run: |
        curl -X POST "${{ github.event.inputs.callback_url }}" \
          -H "Content-Type: application/json" \
          -d '{
            "test_id": "${{ github.event.inputs.test_id }}",
            "run_id": "${{ github.run_id }}",
            "status": "${{ steps.parse-results.outputs.status }}",
            "total_tests": ${{ steps.parse-results.outputs.total }},
            "passed_tests": ${{ steps.parse-results.outputs.passed }},
            "failed_tests": ${{ steps.parse-results.outputs.failed }},
            "artifacts_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'
          
    - name: Comment PR results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const status = '${{ steps.parse-results.outputs.status }}';
          const total = ${{ steps.parse-results.outputs.total }};
          const passed = ${{ steps.parse-results.outputs.passed }};
          const failed = ${{ steps.parse-results.outputs.failed }};
          
          const emoji = status === 'passed' ? '✅' : '❌';
          const comment = `${emoji} **Playwright Test Results**
          
          - Total tests: ${total}
          - Passed: ${passed}
          - Failed: ${failed}
          - Status: ${status}
          
          [View full report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });